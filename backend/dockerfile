# 1Ô∏è‚É£ Use an official Node.js runtime as a base image
FROM node:18-alpine AS builder

# 2Ô∏è‚É£ Set working directory
WORKDIR /app

# 3Ô∏è‚É£ Install pnpm globally
RUN corepack enable && corepack prepare pnpm@latest --activate

# 4Ô∏è‚É£ Copy package.json and pnpm-lock.yaml (important for pnpm!)
COPY package.json pnpm-lock.yaml ./

# 5Ô∏è‚É£ Install dependencies using pnpm
RUN pnpm install --frozen-lockfile

# 6Ô∏è‚É£ Copy the entire project into the container
COPY . .

# 7Ô∏è‚É£ Build the TypeScript project
RUN pnpm run build

# 8Ô∏è‚É£ Use a smaller final image for production
FROM node:18-alpine

WORKDIR /app

# 9Ô∏è‚É£ Install pnpm again in the final stage
RUN corepack enable && corepack prepare pnpm@latest --activate

# üîü Copy only the necessary files from the builder stage
COPY --from=builder /app/package.json /app/pnpm-lock.yaml ./
COPY --from=builder /app/build ./build

# 1Ô∏è‚É£1Ô∏è‚É£ Install only production dependencies
RUN pnpm install --frozen-lockfile --prod

# 1Ô∏è‚É£2Ô∏è‚É£ Set environment variables (optional)
ENV NODE_ENV=production
ENV PORT=8000

# 1Ô∏è‚É£3Ô∏è‚É£ Expose the application port
EXPOSE 8000

# 1Ô∏è‚É£4Ô∏è‚É£ Start the server
CMD ["node", "build/server.js"]